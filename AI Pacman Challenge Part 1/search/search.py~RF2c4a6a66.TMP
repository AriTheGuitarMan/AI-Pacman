# search.py
# ---------
# Licensing Information:  You are free to use or extend these projects for
# educational purposes provided that (1) you do not distribute or publish
# solutions, (2) you retain this notice, and (3) you provide clear
# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
#
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and
# Pieter Abbeel (pabbeel@cs.berkeley.edu).


"""
In search.py, you will implement generic search algorithms which are called by
Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).
    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem.
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state
        Returns True if and only if the state is a valid goal state.
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state
        For a given state, this should return a list of triples, (successor,
        action, stepCost), where 'successor' is a successor to the current
        state, 'action' is the action required to get there, and 'stepCost' is
        the incremental cost of expanding to that successor.
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take
        This method returns the total cost of a particular sequence of actions.
        The sequence must be composed of legal moves.
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
    sequence of moves will be incorrect, so only use this for tinyMaze.
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s, s, w, s, w, w, s, w]


def graphSearch(problem, frontier):
    fringe.push([(problem.getStartState(), "", 1.0)])
    visited = []
    while not fringe.isEmpty():
        node_details = fringe.pop()
        node = node_details[-1][0]
        if node not in visited:
            visited.append(node)
            if problem.isGoalState(node):
                return [path[1] for path in node_details[1:]]
            else:
                successors = [nodes for nodes in problem.getSuccessors(node) if nodes[0] not in visited]
                if successors:
                    for successor in successors:
                        total_path = node_details[:]
                        total_path.append(successor)
                        fringe.push(total_path)
    return []





def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first.
    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.
    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:
    """
    #print "Start:", problem.getStartState()
    #print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    #print "Start's successors:", problem.getSuccessors(problem.getStartState())

    """
    Start: (5, 5)
    Is the start a goal? False
    Start's successors: [((5, 4), 'South', 1), ((4, 5), 'West', 1)]
    """

    "*** YOUR CODE HERE ***"
    #element = None
    #followers = None
    num = 0
    counter = 0
    present_mode = [problem.getStartState(), []]
    discovered = list()
    perimeter = util.Stack()
    limit = 89898

    for x in range(0,limit):
        (present_position, directions) = present_mode
        followers = problem.getSuccessors(present_position)
        length_children = len(followers)
        #for i in range(0,length_children):
        for element in followers:
            perimeter.push((element[num], directions + [element[num+1]]) )
            #perimeter.push(( successors[i][0], directions +   [(successors[i][1])]  ))
        while ( (isPerimeterEmpty == perimeter.isEmpty()) == False):
            if (perimeter.isEmpty()):
                return None
            #else:
            element = perimeter.pop()
            length_discovered = len(discovered)
            isInside = False
            for e in discovered:
                if (e == (element[num])):
                    isInside = True
            #for x in range(0,length_discovered):
                #if(discovered.index)
                #if(     element[num] == discovered.get(x)):
                #isInside = True
            #if ( element[num] in discovered):
            if (isInside == True):
                continue
            else:
                break
            #else:
            #    return None #the stack is empty, so return None
        #if (perimeter.isEmpty()):
        #    return None #the stack is empty, so return None
        #discovered.add(element[num])
        discovered.append(element[num])
        counter = counter + 1
        compare = present_mode[num]
        #>> a, b = a + b, a * b
        present_mode = element
        if(problem.isGoalState(compare) == True):
            break
    """while(not problem.isGoalState(present_mode[num])):
    #while( problem.isGoalState(problem.getStartState()) == False):
        (present_position, directions) = present_mode
        followers = problem.getSuccessors(present_position)
        length_children = len(followers)
        #for i in range(0,length_children):
        for element in followers:
            perimeter.push((element[num], directions + [element[num+1]]) )
            #perimeter.push(( successors[i][0], directions +   [(successors[i][1])]  ))
        while (perimeter.isEmpty() == False):
            if (perimeter.isEmpty()):
                return None
            #else:
            element = perimeter.pop()
            length_discovered = len(discovered)
            isInside = False
            for x in range(0,length_discovered):
                if(element[num] == discovered.get(x)):
                    isInside = True
            #if ( element[num] in discovered):
            if (isInside == True):
                continue
            else:
                break
            #else:
            #    return None #the stack is empty, so return None
        #if (perimeter.isEmpty()):
        #    return None #the stack is empty, so return None
        present_mode = element
        #discovered.add(element[num])
        discovered.append(element[num])
        counter = counter + 1"""
    # print present_mode[1]
    return present_mode[num+1]
    # util.raiseNotDefined()
    """frontier = util.Stack()
    return graphSearch(problem, frontier)"""

def breadthFirstSearch(problem):
    """Search the shallowest nodes in the search tree first."""
    "*** YOUR CODE HERE ***"
    perimeter = util.Queue()
    present_mode = [problem.getStartState(), []]
    successors = None
    discovered = set()
    element = None
    discovered.add(problem.getStartState())
    while not problem.isGoalState(present_mode[0]):
        (present_position, directions) = present_mode
        successors = problem.getSuccessors(present_position)
        length_children = len(successors)
        #for i in range(0,length_children):
        for element in successors:
            perimeter.push((element[0], directions + [element[1]]))
            #perimeter.push(( (successors.get(i))[0], directions + [(successors.get(i))[1]]))
        while(True):
            if (perimeter.isEmpty()):
                return None
            element = perimeter.pop()
            if element[0] not in discovered:
                break
        present_mode = element
        discovered.add(element[0])
    return present_mode[1]
    #util.raiseNotDefined()

def uniformCostSearch(problem):
    """Search the node of least total cost first."""
    "*** YOUR CODE HERE ***"
    perimeter = util.PriorityQueue()
    present_mode = [problem.getStartState(), [], 0]
    successors = None
    discovered = set()
    element = None
    discovered.add(problem.getStartState())
    while not problem.isGoalState(present_mode[0]):
        (present_position, directions, cost) = present_mode
        successors = problem.getSuccessors(present_position)
        for element in successors:
            perimeter.push((element[0], directions + [element[1]], cost + element[2]), cost + element[2])
        while(True):
            if (perimeter.isEmpty()):
                return None
            element = perimeter.pop()
            if element[0] not in discovered:
                break
        present_mode = (element[0], element[1], element[2])
        discovered.add(element[0])
    return present_mode[1]
    #util.raiseNotDefined()

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    """Search the node that has the lowest combined cost and heuristic first."""
    "*** YOUR CODE HERE ***"
    perimeter = util.PriorityQueue()
    present_mode = [problem.getStartState(), [], 0]
    successors = None
    discovered = set()
    element = None
    discovered.add(problem.getStartState())
    while not problem.isGoalState(present_mode[0]):

        (present_position, directions, cost) = present_mode
        successors = problem.getSuccessors(present_position)
        for element in successors:
            perimeter.push((element[0], directions + [element[1]], cost + element[2]), cost + element[2]+heuristic(element[0],problem))
        while(True):
            if (perimeter.isEmpty()):
                return None
            element = perimeter.pop()
            if element[0] not in discovered:
                break
        present_mode = (element[0], element[1], element[2])
        discovered.add(element[0])
    return present_mode[1]
    #util.raiseNotDefined()


# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
